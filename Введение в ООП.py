#  Основу ООП составляют два понятия — классы и объекты

#  Классы обладают: Методами(бежать, плыть, есть) и Свойствам устанавливаются значения(вес, рост, цвет волос)

#  Классы - это схожие свойства и методы объектов

#  Объект — это экземпляр с собственным состоянием этих свойств (то, что будет отличать одного человека от другого),
#  любой предмет, существо, явление.

#  Cвойствам устанавливаются значения, а методам — нет. То есть методы — это определённое поведение, которым
#  характеризуется объект, а свойства могут изменяться


# ---------------------------------------------- Принципы ООП ----------------------------------------------------------

# Наследование:
# Этот принцип базируется на том, что новый класс описывается на основе уже существующего (родительского),
# то есть не только перенимает все свойства родительского класса, но ещё и получает новые.

# Абстракция:
# Абстракция означает выделение главных, наиболее значимых характеристик предмета и, наоборот, отбрасывание
# второстепенных, незначительных. Например, в каждой компании в отделе кадров есть картотека по сотрудникам.
# Но если мы сравним картотеку IT-компании и базу артистов театра и кино, то поймем, что указаны там, скорее
# всего, разные свойства людей. Вряд ли для IT-компании важен будет типаж человека (цвет волос, глаз и так далее),
# а вот для компании, которая занимается съёмкой фильмов, возможно, это будет приоритетнее, чем, например, номер ИНН.


# Инкапсуляция:
# Это свойство системы, позволяющее объединить данные и методы, работающие с ними, в классе и скрыть детали реализации
# от пользователя. Инкапсуляция также означает ограничение доступа к данным и возможностям их изменения.


# Полиморфизм:
# Это свойство системы, позволяющее иметь множество реализаций одного интерфейса. Понятнее будет на примере.
# У нас есть два разных автомобиля, но мы точно знаем: чтобы повернуть налево, нужно повернуть налево и руль.
# Это и есть одинаковость интерфейса, а вот есть там гидроусилитель или нет — различие реализации.

# ---------------------------------------------- Классы ----------------------------------------------------------------

user_peter = {
    "name": "Peter",
    "email": "peterrobertson@mail.com",
    "created_at": "2019-05-05",
    "is_email_verified": True,
    "purchases": ["Egg", "Spam", "Hat", "Knife", "Shield", "Book of Knight secrets"],
}

user_julia = {
    "name": "Julia Donaldson",
    "email": "juliadonaldson@mail.com",
    "created_at": "2019-06-13",
    "is_email_verified": True,
    "purchases": ["Egg", "Spam", "Magic Brush"],
}

product_eggs = {
    "name": "Egg",
    "category": "food",
    "is_available": False,
    "quantity_in_stock": 0,
    "vendor": "Dark Knight LTD",
    "manager": "William The Conqueror",
}


def is_product_available(product):
    return True if product["quantity_in_stock"] > 0 else False


print(is_product_available(product_eggs))


# Класс — это заготовка для создания объектов. После того как вы описали свой класс, вы сможете создавать
# любое количество объектов класса, которые будут устроены единообразно. Такие объекты называются экземплярами.


class UserPeople:  # Создание Класса (с заглавной буквы и склеенные слова с заглавной буквы)
    pass


peter = UserPeople()  # экземпляры Класса
peter.name = "Peter Robertson"  # атрибут экземпляра Класса

julia = UserPeople()  # экземпляры Класса
julia.name = "Julia Donaldson"  # атрибут экземпляра Класса

print(peter.name)
print(julia.name)


class User:  # Класс
    number_of_fingers = 5  # Атрибут Класса
    number_of_eyes = 2  # Атрибут Класса


lancelot = User()  # присваивание переменной Класса
print(lancelot.number_of_fingers)  # вывод переменной с атрибутом Класса
print()
